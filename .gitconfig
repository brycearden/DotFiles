[include]
    path = .gitconfig.khan

[core]
    editor = vim
    autocrlf = input

[user]
    name = Phillip Lemons
    email = philliplemons512@gmail.com

[credential]
    helper = cache

[branch]
    # autosetupmerge auto-adds the --track flag to each git branch,
    # which is helpful for arc (part of Phabricator).  autosetuprebase
    # means that instead of merging it will rebase.  Weird you need both!
    autosetupmerge = always
    autosetuprebase = always

[alias]
    lg = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    ls = log --oneline -5
    # When merging use our verson of the given files and forget about theirs
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"

    # Versions of commands that handle submodules properly.
    co = "!f() { git checkout \"$@\" && git submodule update --init --recursive; }; f"
    p = "!f() { git pull \"$@\" && git submodule update --init --recursive; }; f"
    m = "!f() { git merge \"$@\" && git submodule update --init --recursive; }; f"
    gsu = "!f() { git submodule sync --recursive && git submodule update --init --recursive; }; f"

    # Branch management for dealing with phabricator and github-style deploys.
    # e.g. deploy-branch, review-branch, find-reviewers
    # Note that these reference scripts from Khan/git-workflow
    # Those scripts should be installed and part of the default path.
    phabricator-branch = !git review-branch
    rgrep = !git recursive-grep
    findreviewers = !git find-reviewers ; old-style had no dash in name

    # Abbreviations for KA specific tools
    db = !git deploy-branch
    rb = !git review-branch
    pb = !git review-branch       ; short for 'phabricator branch'

    # Other useful commands.
    outgoing = "!git fetch >/dev/null 2>&1; git log @{upstream}..HEAD"
    incoming = "!git fetch >/dev/null 2>&1; git log HEAD..@{upstream}"
    update-submodule = !bash -c 'git pull --no-rebase && pushd $1 && git co master && git pull && popd && git commit ${1%/} -m Substate\\ for\\ ${1%/} -m Test\\ plan: -m None && git push' --

    # For after a commit fails with lint, and it says 'commit message saved...'
    recommit = "!git commit -F \"`git rev-parse --git-dir`\"/commit.save"
    weekly = "!git log --author=$USER --since=`date -d last\\ monday +%Y/%m/%d`"

    # Versions of commands with useful options specified.
    graph = log --graph --decorate --oneline --pretty=format:"%h%x20%Cgreen%d%x20%Cred%an%x20%Cblue%ad%x20%Creset%s" --all --full-history --date=short
    ls-ignored = ls-files --exclude-standard --ignored --others
    conflicts = diff --name-only --diff-filter=U

[push]
    default = simple

[diff]
    tool = vimdiff

[push]
    default = simple

[kaclone]
    email = phillip@khanacademy.org

